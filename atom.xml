<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帕克的部落格</title>
  
  
  <link href="https://parkersnote.top/atom.xml" rel="self"/>
  
  <link href="https://parkersnote.top/"/>
  <updated>2025-05-04T09:23:04.131Z</updated>
  <id>https://parkersnote.top/</id>
  
  <author>
    <name>Parker</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>华为多屏协同win11输入法皮肤问题</title>
    <link href="https://parkersnote.top/601dcdfa.html"/>
    <id>https://parkersnote.top/601dcdfa.html</id>
    <published>2025-05-04T09:22:54.000Z</published>
    <updated>2025-05-04T09:23:04.131Z</updated>
    
    <content type="html"><![CDATA[<p>用过华为多屏协同的用户都知道，win11系统中会出现输入法皮肤变回win10的情况，我在网上搜索了很多，基本上都是需要火绒来锁注册表，实际上，锁注册表完全可以通过命令行实现。</p><p>锁注册表的命令如下，通过powershell运行：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义需要锁定的注册表项路径</span></span><br><span class="line"><span class="variable">$key</span> = <span class="string">"HKLM:\SOFTWARE\Example"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前注册表项的访问控制列表（ACL）</span></span><br><span class="line"><span class="variable">$acl</span> = <span class="built_in">Get-Acl</span> <span class="variable">$key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一条新的访问规则：拒绝所有用户（Everyone）的 "SetValue" 权限</span></span><br><span class="line"><span class="variable">$rule</span> = <span class="built_in">New-Object</span> System.Security.AccessControl.RegistryAccessRule(<span class="string">"Everyone"</span>, <span class="string">"SetValue"</span>, <span class="string">"Deny"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将规则添加到 ACL 中</span></span><br><span class="line"><span class="variable">$acl</span>.AddAccessRule(<span class="variable">$rule</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将修改后的 ACL 重新应用到注册表项</span></span><br><span class="line"><span class="built_in">Set-Acl</span> <span class="variable">$key</span> <span class="variable">$acl</span></span><br></pre></td></tr></tbody></table></figure><p>针对华为输入法的问题，可以直接复制粘贴以下指令运行：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义注册表路径</span></span><br><span class="line"><span class="variable">$regPath</span> = <span class="string">"HKCU:\Software\Microsoft\Input\Tsf\Tsf3Override\{81d4e9c9-1d3b-41bc-9e6c-4b40bf79e35e}"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前 ACL（访问控制列表）</span></span><br><span class="line"><span class="variable">$acl</span> = <span class="built_in">Get-Acl</span> <span class="variable">$regPath</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建拒绝规则：禁止 "Everyone" 修改 "NoTsf3Override2" 的值</span></span><br><span class="line"><span class="variable">$denyRule</span> = <span class="built_in">New-Object</span> System.Security.AccessControl.RegistryAccessRule(</span><br><span class="line">    <span class="string">"Everyone"</span>,                <span class="comment"># 目标用户/组（Everyone 表示所有用户）</span></span><br><span class="line">    <span class="string">"SetValue"</span>,                <span class="comment"># 禁止修改值</span></span><br><span class="line">    <span class="string">"Deny"</span>                     <span class="comment"># 拒绝权限</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将规则添加到 ACL</span></span><br><span class="line"><span class="variable">$acl</span>.AddAccessRule(<span class="variable">$denyRule</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用新的 ACL</span></span><br><span class="line"><span class="built_in">Set-Acl</span> <span class="literal">-Path</span> <span class="variable">$regPath</span> <span class="literal">-AclObject</span> <span class="variable">$acl</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义注册表路径</span></span><br><span class="line"><span class="variable">$regPath</span> = <span class="string">"HKCU:\Software\Microsoft\CTF\TIP\{81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E}"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前 ACL（访问控制列表）</span></span><br><span class="line"><span class="variable">$acl</span> = <span class="built_in">Get-Acl</span> <span class="variable">$regPath</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建拒绝规则：禁止 "Everyone" 修改 "NoTsf3Override2" 的值</span></span><br><span class="line"><span class="variable">$denyRule</span> = <span class="built_in">New-Object</span> System.Security.AccessControl.RegistryAccessRule(</span><br><span class="line">    <span class="string">"Everyone"</span>,                <span class="comment"># 目标用户/组（Everyone 表示所有用户）</span></span><br><span class="line">    <span class="string">"SetValue"</span>,                <span class="comment"># 禁止修改值</span></span><br><span class="line">    <span class="string">"Deny"</span>                     <span class="comment"># 拒绝权限</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将规则添加到 ACL</span></span><br><span class="line"><span class="variable">$acl</span>.AddAccessRule(<span class="variable">$denyRule</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用新的 ACL</span></span><br><span class="line"><span class="built_in">Set-Acl</span> <span class="literal">-Path</span> <span class="variable">$regPath</span> <span class="literal">-AclObject</span> <span class="variable">$acl</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>本博客只进行记录，请谨慎运行命令行，出现问题可以咨询ai解决</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用过华为多屏协同的用户都知道，win11系统中会出现输入法皮肤变回win10的情况，我在网上搜索了很多，基本上都是需要火绒来锁注册表，实际上，锁注册表完全可以通过命令行实现。&lt;/p&gt;
&lt;p&gt;锁注册表的命令如下，通过powershell运行：&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    
    <category term="笔记" scheme="https://parkerindustry.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>自建zerotier-one服务器，随时随地访问内网设备</title>
    <link href="https://parkersnote.top/2b9f0a5e.html"/>
    <id>https://parkersnote.top/2b9f0a5e.html</id>
    <published>2024-09-26T09:59:39.000Z</published>
    <updated>2024-09-26T09:59:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信每一个自建博客的人都有一个自己的服务器，笔者也是。再加上前段时间组建了nas，便准备通过服务器访问家里的一些设备。一些主流的方法如frp方法虽好，但是将家里的设备都暴露在公网上。有很大的不安全性。像zerotier这种组网方式，因为服务器在海外，所以体验并不是很好。</p><p>但是可以通过自建服务器解决这个问题。最近折腾完了，遂记录下来。<br>参考链接：</p><ul><li><a href="https://github.com/xubiaolin/docker-zerotier-planet">https://github.com/xubiaolin/docker-zerotier-planet</a></li><li><a href="https://blog.csdn.net/zc_mk/article/details/137743742">https://blog.csdn.net/zc_mk/article/details/137743742</a></li></ul><h2 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h2><p>如果你没有这些条件，就不用看下去了</p><ul><li>一台有ipv4公网的服务器</li></ul><h2 id="服务器操作"><a href="#服务器操作" class="headerlink" title="服务器操作"></a>服务器操作</h2><h3 id="安装docker-zerotier-planet"><a href="#安装docker-zerotier-planet" class="headerlink" title="安装docker-zerotier-planet"></a>安装docker-zerotier-planet</h3><p>刚开始我是不愿意使用docker的，但是中间踩了不少坑，最后搭建的也不是正确的planet节点，最终妥协使用了大佬编译好的docker镜像和一键脚本。最开始写这篇博客的时候用的ztncui是中文界面，但是后续改成的docker页面是英文界面，不过操作相同，就不重新截图了。<br>首先git下来脚本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xubiaolin/docker-zerotier-planet.git</span><br></pre></td></tr></tbody></table></figure><p>加速地址：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://ghproxy.imoyuapp.win/https://github.com/xubiaolin/docker-zerotier-planet.git</span><br></pre></td></tr></tbody></table></figure><p>进入目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> docker-zerotier-planet</span><br></pre></td></tr></tbody></table></figure><p>运行脚本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./deploy.sh</span><br></pre></td></tr></tbody></table></figure><p>根据提示设置端口并进入到你服务器的安全组设置开放对应端口号。根据提示设置公网ip后，会有一个下载连接，根据连接把<code>planet</code>下载下来。</p><h3 id="管理操作"><a href="#管理操作" class="headerlink" title="管理操作"></a>管理操作</h3><p>这时候打开http://你的服务器ip:3443 即可进行管理，默认账号<code>admin</code>，密码<code>password</code>。<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926175853.png" alt="后台管理页面"></p><p>点击添加网络：<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926180143.png" alt="添加网络"><br>名字随便起<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926171848.png" alt="起名"><br>点击<strong>简易安装</strong>，名称后面的是网络id，记录一下，后面会用到。<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926180315.png" alt="简易安装"></p><p>点击生成网络地址并提交<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926172027.png" alt="生成网络地址"></p><p>至此，服务器操作结束。</p><h2 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h2><h3 id="windows客户端"><a href="#windows客户端" class="headerlink" title="windows客户端"></a>windows客户端</h3><p>以windows为例，其他操作系统大同小异，其核心为替换官方客户端的<code>planet</code>为你自己编译的<code>planet</code>。<br>首先下载zerotier客户端：<a href="https://www.zerotier.com/download/">https://www.zerotier.com/download/</a><br>如果你已经加入过zerotier官方服务器的网络，请<code>disconnect</code>并<code>forget</code>。<br><code>win</code>+<code>R</code>调出运行框，搜索<code>services.msc</code>并确定<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926172506.png" alt="运行"><br>右键<code>ZeroTier One</code>，选择<code>属性</code>，找到其所在文件夹并打开。<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926172555.png" alt="属性"><br>替换其中的<code>planet</code>文件为你自己在第一步编译出的<code>planet</code>文件。<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926172708.png" alt="文件"></p><p>重启服务<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926172949.png" alt="重启服务"></p><p>任务栏找到zerotier，右键join新网络：<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926173054.png" alt="加入新网络"><br>输入之前提到的网络id<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926173211.png" alt="网络id"><br>右键zerotier选择网络id进行链接。<br>这时候还不能操作，需要去后台http://你的服务器ip:3443 允许其联网。<br>就是把这个√打上<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926173419.png" alt="打勾"><br>可以去CMD输入<code>Zerotier-cli peers</code>查看链接状态，<code>DIRECT</code>代表直连，<code>RELAY</code>代表中继，服务器网络一般的话中继会非常慢。<br><strong>注意：</strong>这里就是我踩坑的地方，如果搭建成功，这里应该只有一个<code>planet</code>!!!!<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926200834.png" alt="CMD"></p><h3 id="安卓客户端"><a href="#安卓客户端" class="headerlink" title="安卓客户端"></a>安卓客户端</h3><p>其他平台都是一样的操作，本质上就是更换<code>planet</code>文件，不再赘述。<br>这里提供第三方zerotier安卓客户端地址，可以更换planet：<a href="https://github.com/kaaass/ZerotierFix">https://github.com/kaaass/ZerotierFix</a></p><h2 id="内网互访"><a href="#内网互访" class="headerlink" title="内网互访"></a>内网互访</h2><p>到此，自建zerotier服务器就结束了，但是针对一些特殊需求，比如我需要远程玩ps5，但是ps5本身不可能安装zerotier，怎么办呢。<br>这时候就可以用zerotier的路由功能来实现。</p><h3 id="linux系统"><a href="#linux系统" class="headerlink" title="linux系统"></a>linux系统</h3><p>正好我家有一台nas，就准备用它来实现了；</p><h4 id="开启ip转发"><a href="#开启ip转发" class="headerlink" title="开启ip转发"></a>开启ip转发</h4><ul><li>进入终端，输入<code>vim /etc/sysctl.conf</code>编辑sysctl.conf文件。</li><li>增加代码：<figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv6.conf.all.forwarding=1</span><br></pre></td></tr></tbody></table></figure></li><li>输入<code>sysctl -p</code>加载内核参数</li></ul><h4 id="配置客户端路由"><a href="#配置客户端路由" class="headerlink" title="配置客户端路由"></a>配置客户端路由</h4><ol><li>输入<code>ifconfig</code>，记录下物理网卡以及 ZeroTier 的虚拟网卡，这个根据你在后台看到的虚拟ip和你物理机的真实ip就可以找到。</li><li>将网卡名字导出为环境变量<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHYSICAL_IFACE=&lt;物理网卡&gt;</span><br><span class="line">ZEROTIER_IFACE=&lt;ZeroTier 虚拟网卡&gt;</span><br></pre></td></tr></tbody></table></figure></li><li>更新路由表<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -o <span class="variable">$PHYSICAL_IFACE</span> -j MASQUERADE</span><br><span class="line">iptables -A FORWARD -i <span class="variable">$PHYSICAL_IFACE</span> -o <span class="variable">$ZEROTIER_IFACE</span> -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i <span class="variable">$ZEROTIER_IFACE</span> -o <span class="variable">$PHYSICAL_IFACE</span> -j ACCEPT</span><br><span class="line">iptables-save</span><br></pre></td></tr></tbody></table></figure></li><li>持久化路由表<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/sysconfig/</span><br><span class="line">sh -c <span class="string">"iptables-save &gt; /etc/sysconfig/iptables"</span></span><br></pre></td></tr></tbody></table></figure></li><li>在<code>/etc/rc.local</code>文件的末尾添加一行<figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables-restore &lt; /etc/sysconfig/iptables</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="配置-ZeroTier-路由规则"><a href="#配置-ZeroTier-路由规则" class="headerlink" title="配置 ZeroTier 路由规则"></a>配置 ZeroTier 路由规则</h4><p>到我们的服务器后台，选择网络的路由选项。<br><img src="https://image.178973.xyz/img/2024%2F09%2F28%2F20240928214528.png" alt="路由"></p><p>在添加新路由这里进行配置<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926175246.png" alt="添加新路由"><br>其中目标是你内网的ip，比如你的家庭内网的路由器是<code>192.168.1.1</code>，那么你就填<code>192.168.1.0/24</code>，网关是你希望转发的那台设备加入zerotier网络时分配的ip。<br><img src="https://image.178973.xyz/img/2024%2F09%2F26%2F20240926175520.png" alt="路由"></p><p>这时候，你应该就可以像连接内网一样用家里路由器的ip进行设备访问了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相信每一个自建博客的人都有一个自己的服务器，笔者也是。再加上前段时间组建了nas，便准备通过服务器访问家里的一些设备。一些主流的方法如frp方法虽好，但是将家里的设备都暴露在公网上。有很大的不安全性。像zerotier这种组网方式，因为服务器在海外，所以体验并不是很好。&lt;/</summary>
      
    
    
    
    <category term="网络" scheme="https://parkersnote.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="https://parkerindustry.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>使用PicGo+github+cloudflare打造个人私有图床</title>
    <link href="https://parkersnote.top/308a38be.html"/>
    <id>https://parkersnote.top/308a38be.html</id>
    <published>2024-09-25T05:36:30.000Z</published>
    <updated>2024-09-25T05:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/347516134">https://zhuanlan.zhihu.com/p/347516134</a></li><li><a href="https://james-blog.top/posts/21.html">https://james-blog.top/posts/21.html</a></li></ul><p>搭建博客过程中，不可避免的就是搭建一个属于自己的图床，本着能白嫖就绝不付费的精神，我尝试使用GitHub搭建图床并使用cloudflare进行加速访问，并将搭建过程记录下来。</p><h2 id="github操作"><a href="#github操作" class="headerlink" title="github操作"></a>github操作</h2><h3 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h3><p>首先创建一个github仓库用于存储图片，注意需要设置为<code>public</code><br><img src="https://image.178973.xyz/img/2024/09/25/20240925122054.png" alt="创建仓库"></p><h3 id="创建Token"><a href="#创建Token" class="headerlink" title="创建Token"></a>创建Token</h3><p>为了访问我们的仓库，需要创建Token，直接点击链接<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> 即可设置，这里选择<code>classic</code><br><img src="https://image.178973.xyz/img/2024%2F09%2F25%2F20240925122526.png" alt="设置Token"></p><p><strong>注意：</strong>创建Token时，一定要勾上<code>repo</code>选项，其他权限随意，过期时间可以自己把握，创建完成后，Token只会展示一次，请妥善保管<br><img src="https://image.178973.xyz/img/2024%2F09%2F25%2F20240925122647.png" alt="repo"></p><h2 id="下载并配置PicGo"><a href="#下载并配置PicGo" class="headerlink" title="下载并配置PicGo"></a>下载并配置PicGo</h2><p>PicGo是一个开源的图床管理客户端，支持七牛图床、腾讯云 COS、又拍云 、GitHub、SM.MS、阿里云 OSS、Imgur v1.6.0<br><strong>下载链接：</strong> <a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a><br>因为我们使用github搭建图床，所以这里给出github的配置<br>配置如下：</p><ul><li>图床配置名：自己定义</li><li>设定仓库名：github用户名/仓库名，如：githubaccount/myblogpic</li><li>设定分支名：仓库分支，在网页添加README文件即可创建main分支</li><li>设定Token：刚刚获取的Token</li><li>设定存储路径：选填，顾名思义</li><li>设置自定义域名：后续cloudflare讲解<br><img src="https://image.178973.xyz/img/2024%2F09%2F25%2F20240925123555.png" alt="github图床配置"></li></ul><p>建议安装super-prefix插件，可以给上传的图片自动命名，方便整理，如果遇到下载不成功问题可以配置npm的淘宝镜像源解决，这里不再赘述。</p><p>到此为止便搭建完成图库了，不需要进行加速的就不用往下看了，后续内容是使用cloudflare加速图床访问的记录。</p><h2 id="cloudflare加速访问"><a href="#cloudflare加速访问" class="headerlink" title="cloudflare加速访问"></a>cloudflare加速访问</h2><p>cloudflare真是个大善人，白嫖了不少东西。<br>搭建完成图库后发现网页访问变慢了，其原因就是github的访问问题，虽然开图片懒加载会解决一部分问题，但是归根到底不是长久之计</p><p>于是便想到使用cloudflare的workers功能进行加速。cloudflare每日给了100,000次免费请求数，对于个人用户肯定是够用了。<br>必要条件：</p><ul><li>有一个自己的域名</li><li>域名托管到cloudflare</li></ul><p>这部分网络上有很多教程，不再赘述。</p><h3 id="创建workers"><a href="#创建workers" class="headerlink" title="创建workers"></a>创建workers</h3><p>打开cloudflare官网，进入workers and pages页面，点击创建<br><img src="https://image.178973.xyz/img/2024%2F09%2F28%2F20240928215044.png" alt="workersandpages"><br>名字随便起，这里会给你分配一个免费的三级域名，但是不建议使用这个域名，有概率无法访问。设置完成后点击部署<br><img src="https://image.178973.xyz/img/2024%2F09%2F25%2F20240925124843.png" alt="设置worker"><br>点击编辑代码<br><img src="https://image.178973.xyz/img/2024%2F09%2F25%2F20240925125105.png" alt="编辑代码"><br>修改worker.js内容，参考来源：<a href="https://james-blog.top/posts/21.html">https://james-blog.top/posts/21.html</a><br>代码如下，直接粘贴就好，报错也不用管。<br><strong>注意：</strong>修改代理路径和token内容，其他内容无需修改。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Website you intended to retrieve for users.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">"raw.githubusercontent.com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="comment">// (1) 填写代理的路径，格式为 /&lt;用户&gt;/&lt;仓库名&gt;/&lt;分支&gt;</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">"****"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// github personal access token.</span></span><br><span class="line"><span class="comment">// (2) 填写github令牌</span></span><br><span class="line"><span class="keyword">const</span> github_token = <span class="string">"****"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Website you intended to retrieve for users using mobile devices.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = upstream;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Countries and regions where you wish to suspend your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP addresses which you wish to block from using your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">"0.0.0.0"</span>, <span class="string">"127.0.0.1"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to disable cache.</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace texts.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = {</span><br><span class="line">  <span class="attr">$upstream</span>: <span class="string">"$custom_domain"</span>,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">"fetch"</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> {</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">fetchAndApply</span>(event.<span class="property">request</span>));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchAndApply</span>(<span class="params">request</span>) {</span><br><span class="line">  <span class="keyword">const</span> region = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">"cf-ipcountry"</span>)?.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  <span class="keyword">const</span> ip_address = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">"cf-connecting-ip"</span>);</span><br><span class="line">  <span class="keyword">const</span> user_agent = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">"user-agent"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">let</span> url_hostname = url.<span class="property">hostname</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (https == <span class="literal">true</span>) {</span><br><span class="line">    url.<span class="property">protocol</span> = <span class="string">"https:"</span>;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    url.<span class="property">protocol</span> = <span class="string">"http:"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">await</span> <span class="title function_">device_status</span>(user_agent)) {</span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream_mobile;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  url.<span class="property">host</span> = upstream_domain;</span><br><span class="line">  <span class="keyword">if</span> (url.<span class="property">pathname</span> == <span class="string">"/"</span>) {</span><br><span class="line">    url.<span class="property">pathname</span> = upstream_path;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    url.<span class="property">pathname</span> = upstream_path + url.<span class="property">pathname</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (blocked_region.<span class="title function_">includes</span>(region)) {</span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">      <span class="string">"Access denied: WorkersProxy is not available in your region yet."</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (blocked_ip_address.<span class="title function_">includes</span>(ip_address)) {</span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">      <span class="string">"Access denied: Your IP address is blocked by WorkersProxy."</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">let</span> method = request.<span class="property">method</span>;</span><br><span class="line">    <span class="keyword">let</span> request_headers = request.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(request_headers);</span><br><span class="line"></span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">"Host"</span>, upstream_domain);</span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">"Referer"</span>, url.<span class="property">protocol</span> + <span class="string">"//"</span> + url_hostname);</span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">"Authorization"</span>, <span class="string">"token "</span> + github_token);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url.<span class="property">href</span>, {</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">headers</span>: new_request_headers,</span><br><span class="line">      <span class="attr">body</span>: request.<span class="property">body</span>,</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> connection_upgrade = new_request_headers.<span class="title function_">get</span>(<span class="string">"Upgrade"</span>);</span><br><span class="line">    <span class="keyword">if</span> (connection_upgrade &amp;&amp; connection_upgrade.<span class="title function_">toLowerCase</span>() == <span class="string">"websocket"</span>) {</span><br><span class="line">      <span class="keyword">return</span> original_response;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response_clone = original_response.<span class="title function_">clone</span>();</span><br><span class="line">    <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> response_headers = original_response.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(response_headers);</span><br><span class="line">    <span class="keyword">let</span> status = original_response.<span class="property">status</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (disable_cache) {</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(<span class="string">"Cache-Control"</span>, <span class="string">"no-store"</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(<span class="string">"Cache-Control"</span>, <span class="string">"max-age=43200000"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">"access-control-allow-origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">"access-control-allow-credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">"content-security-policy"</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">"content-security-policy-report-only"</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">"clear-site-data"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">"x-pjax-url"</span>)) {</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(</span><br><span class="line">        <span class="string">"x-pjax-url"</span>,</span><br><span class="line">        response_headers</span><br><span class="line">          .<span class="title function_">get</span>(<span class="string">"x-pjax-url"</span>)</span><br><span class="line">          .<span class="title function_">replace</span>(<span class="string">"//"</span> + upstream_domain, <span class="string">"//"</span> + url_hostname)</span><br><span class="line">      );</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> content_type = new_response_headers.<span class="title function_">get</span>(<span class="string">"content-type"</span>);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      content_type != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      content_type.<span class="title function_">includes</span>(<span class="string">"text/html"</span>) &amp;&amp;</span><br><span class="line">      content_type.<span class="title function_">includes</span>(<span class="string">"UTF-8"</span>)</span><br><span class="line">    ) {</span><br><span class="line">      original_text = <span class="keyword">await</span> <span class="title function_">replace_response_text</span>(</span><br><span class="line">        original_response_clone,</span><br><span class="line">        upstream_domain,</span><br><span class="line">        url_hostname</span><br><span class="line">      );</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      original_text = original_response_clone.<span class="property">body</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(original_text, {</span><br><span class="line">      status,</span><br><span class="line">      <span class="attr">headers</span>: new_response_headers,</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">replace_response_text</span>(<span class="params">response, upstream_domain, host_name</span>) {</span><br><span class="line">  <span class="keyword">let</span> text = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> replace_dict) {</span><br><span class="line">    j = replace_dict[i];</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="string">"$upstream"</span>) {</span><br><span class="line">      i = upstream_domain;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">"$custom_domain"</span>) {</span><br><span class="line">      i = host_name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="string">"$upstream"</span>) {</span><br><span class="line">      j = upstream_domain;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="string">"$custom_domain"</span>) {</span><br><span class="line">      j = host_name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(i, <span class="string">"g"</span>);</span><br><span class="line">    text = text.<span class="title function_">replace</span>(re, j);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">device_status</span>(<span class="params">user_agent_info</span>) {</span><br><span class="line">  <span class="keyword">var</span> agents = [</span><br><span class="line">    <span class="string">"Android"</span>,</span><br><span class="line">    <span class="string">"iPhone"</span>,</span><br><span class="line">    <span class="string">"SymbianOS"</span>,</span><br><span class="line">    <span class="string">"Windows Phone"</span>,</span><br><span class="line">    <span class="string">"iPad"</span>,</span><br><span class="line">    <span class="string">"iPod"</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; agents.<span class="property">length</span>; v++) {</span><br><span class="line">    <span class="keyword">if</span> (user_agent_info.<span class="title function_">indexOf</span>(agents[v]) &gt; <span class="number">0</span>) {</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改完成后点击部署<br><img src="https://image.178973.xyz/img/2024%2F09%2F25%2F20240925125521.png" alt="部署"></p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>请确认已经将你自己的域名托管到cloudflare，这部分不再赘述。<br>依次点击<code>设置</code>，<code>添加</code>，<code>自定义域</code><br><img src="https://image.178973.xyz/img/2024%2F09%2F25%2F20240925125717.png" alt="绑定域名"></p><p>起一个二级域名，如：<code>imags.xxxx.com</code><br><img src="https://image.178973.xyz/img/2024%2F09%2F25%2F20240925125911.png" alt="二级域名"></p><p>设置完成后即可使用自己的域名进行图床图片访问。</p><h3 id="PicGo设置"><a href="#PicGo设置" class="headerlink" title="PicGo设置"></a>PicGo设置</h3><p>最后一步，在刚刚PicGo的配置中设定自定义域名，注意末尾不要加<code>/</code>，不然访问会有问题<br><img src="https://image.178973.xyz/img/2024%2F09%2F25%2F20240925130229.png" alt="自定义域名"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/347516134&quot;&gt;https://zhuanlan.zhihu.com/p/347516134&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://</summary>
      
    
    
    
    <category term="建站" scheme="https://parkersnote.top/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="cloudflare" scheme="https://parkerindustry.github.io/tags/cloudflare/"/>
    
    <category term="github" scheme="https://parkerindustry.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>思源笔记，自己的数据自己掌握</title>
    <link href="https://parkersnote.top/99c2ad2f.html"/>
    <id>https://parkersnote.top/99c2ad2f.html</id>
    <published>2024-09-20T05:22:51.000Z</published>
    <updated>2024-09-20T05:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年终于组件了自己的nas，做了内网穿透、搭了jellyfin服务器等等。折腾完之后便索然无味了，最近突然想搭建一个私有笔记服务，一番比较后选择了思源笔记这个项目。<br>我是使用docker部署在自己的nas上的，如果不需要/不喜欢折腾的话，可以使用他们开箱即用的客户端。<br>思源笔记官网：<a href="https://b3log.org/siyuan/?lang=cn">https://b3log.org/siyuan/?lang=cn</a></p><h2 id="先看效果："><a href="#先看效果：" class="headerlink" title="先看效果："></a>先看效果：</h2><p><img src="https://image.178973.xyz/img/2024/09/25/20240925095637.png" alt="思源笔记截图"></p><h2 id="说说优点："><a href="#说说优点：" class="headerlink" title="说说优点："></a>说说优点：</h2><ul><li>私有化部署，数据完全由自己掌控</li><li>无需客户端，只要有浏览器就可以访问</li><li>Markdown格式编辑</li><li>一键部署，省时省力</li></ul><h2 id="说说缺点："><a href="#说说缺点：" class="headerlink" title="说说缺点："></a>说说缺点：</h2><ul><li>docker版本的思源笔记是无法使用官方客户端进行连接的</li></ul><h2 id="docker命令如下"><a href="#docker命令如下" class="headerlink" title="docker命令如下"></a>docker命令如下</h2><figure class="highlight docker"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d -v workspace_dir_host:workspace_dir_container -p 6806:6806 b3log/siyuan --workspace=workspace_dir_container --accessAuthCode=xxx</span></span><br></pre></td></tr></tbody></table></figure><p>其中，<code>workspace_dir_container</code>指定思源笔记的内部工作文件夹，<code>workspace_dir_host</code>为你docker持久化需要的文件夹，<code>accessAuthCode</code>是必须填的，不然会闪退，这个就是访问你笔记的密码，如果想要外网访问肯定就需要加密码了。</p><p>这里记录一下我遇到的问题：思源笔记的docker内部使用的是siyuan这个用户，并不是常用的root用户，这就导致使用的时候会遇到一些问题，请确保你持久化的文件夹授予了siyuan用户组权限，或者最简单的，直接赋予文件夹everyone读写权限<br><img src="https://image.178973.xyz/img/2024/09/25/20240925095803.png" alt="权限截图"></p><h2 id="完成部署"><a href="#完成部署" class="headerlink" title="完成部署"></a>完成部署</h2><p>部署完成后，打开<a href="http://localhost:6806/">http://localhost:6806</a> 即可访问思源笔记，授权码即为之前设置的<code>accessAuthCode</code><br><img src="https://image.178973.xyz/img/2024/09/25/20240925095840.png" alt="思源笔记"></p><p>如果需要外网访问，可自行配置反向代理。</p><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><p>思源笔记提供了一个浏览器插件，可以实现直接将网页保存到笔记<br><img src="https://image.178973.xyz/img/2024/09/25/20240925095902.png" alt="浏览器插件"><br>插件地址：<a href="https://microsoftedge.microsoft.com/addons/detail/siyuan/lclhdlhleinlppggbbgimbekofanbkcf">edge</a>，<a href="https://chromewebstore.google.com/detail/siyuan/hkcgjbeblifaincobbcfiffbpgoafepk?pli=1">chrome</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今年终于组件了自己的nas，做了内网穿透、搭了jellyfin服务器等等。折腾完之后便索然无味了，最近突然想搭建一个私有笔记服务，一番比较后选择了思源笔记这个项目。&lt;br&gt;我是使用docker部署在自己的nas上的，如果不需要/不喜欢折腾的话，可以使用他们开箱即用的客户端。</summary>
      
    
    
    
    <category term="nas" scheme="https://parkersnote.top/categories/nas/"/>
    
    <category term="docker" scheme="https://parkersnote.top/categories/nas/docker/"/>
    
    
    <category term="笔记" scheme="https://parkerindustry.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://parkersnote.top/4a17b156.html"/>
    <id>https://parkersnote.top/4a17b156.html</id>
    <published>2024-09-20T04:30:27.000Z</published>
    <updated>2024-09-20T04:30:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇博客，欢迎来到我的博客</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一篇博客，欢迎来到我的博客&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
