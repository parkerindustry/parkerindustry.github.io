<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/4a17b156.html</url>
    <content><![CDATA[第一篇博客，欢迎来到我的博客
]]></content>
  </entry>
  <entry>
    <title>使用PicGo+github+cloudflare打造个人私有图床</title>
    <url>/308a38be.html</url>
    <content><![CDATA[参考链接：

https://zhuanlan.zhihu.com/p/347516134
https://james-blog.top/posts/21.html

搭建博客过程中，不可避免的就是搭建一个属于自己的图床，本着能白嫖就绝不付费的精神，我尝试使用GitHub搭建图床并使用cloudflare进行加速访问，并将搭建过程记录下来。
github操作创建github仓库首先创建一个github仓库用于存储图片，注意需要设置为public
创建Token为了访问我们的仓库，需要创建Token，直接点击链接https://github.com/settings/tokens 即可设置，这里选择classic
注意：创建Token时，一定要勾上repo选项，其他权限随意，过期时间可以自己把握，创建完成后，Token只会展示一次，请妥善保管
下载并配置PicGoPicGo是一个开源的图床管理客户端，支持七牛图床、腾讯云 COS、又拍云 、GitHub、SM.MS、阿里云 OSS、Imgur v1.6.0下载链接： https://github.com/Molunerfinn/picgo/releases因为我们使用github搭建图床，所以这里给出github的配置配置如下：

图床配置名：自己定义
设定仓库名：github用户名/仓库名，如：githubaccount/myblogpic
设定分支名：仓库分支，在网页添加README文件即可创建main分支
设定Token：刚刚获取的Token
设定存储路径：选填，顾名思义
设置自定义域名：后续cloudflare讲解

建议安装super-prefix插件，可以给上传的图片自动命名，方便整理，如果遇到下载不成功问题可以配置npm的淘宝镜像源解决，这里不再赘述。
到此为止便搭建完成图库了，不需要进行加速的就不用往下看了，后续内容是使用cloudflare加速图床访问的记录。
cloudflare加速访问cloudflare真是个大善人，白嫖了不少东西。搭建完成图库后发现网页访问变慢了，其原因就是github的访问问题，虽然开图片懒加载会解决一部分问题，但是归根到底不是长久之计
于是便想到使用cloudflare的workers功能进行加速。cloudflare每日给了100,000次免费请求数，对于个人用户肯定是够用了。必要条件：

有一个自己的域名
域名托管到cloudflare

这部分网络上有很多教程，不再赘述。
创建workers打开cloudflare官网，进入workers and pages页面，点击创建名字随便起，这里会给你分配一个免费的三级域名，但是不建议使用这个域名，有概率无法访问。设置完成后点击部署点击编辑代码修改worker.js内容，参考来源：https://james-blog.top/posts/21.html代码如下，直接粘贴就好，报错也不用管。注意：修改代理路径和token内容，其他内容无需修改。
// Website you intended to retrieve for users.const upstream = "raw.githubusercontent.com";// Custom pathname for the upstream website.// (1) 填写代理的路径，格式为 /&lt;用户&gt;/&lt;仓库名&gt;/&lt;分支&gt;const upstream_path = "****";// github personal access token.// (2) 填写github令牌const github_token = "****";// Website you intended to retrieve for users using mobile devices.const upstream_mobile = upstream;// Countries and regions where you wish to suspend your service.const blocked_region = [];// IP addresses which you wish to block from using your service.const blocked_ip_address = ["0.0.0.0", "127.0.0.1"];// Whether to use HTTPS protocol for upstream address.const https = true;// Whether to disable cache.const disable_cache = false;// Replace texts.const replace_dict = {  $upstream: "$custom_domain",};addEventListener("fetch", (event) =&gt; {  event.respondWith(fetchAndApply(event.request));});async function fetchAndApply(request) {  const region = request.headers.get("cf-ipcountry")?.toUpperCase();  const ip_address = request.headers.get("cf-connecting-ip");  const user_agent = request.headers.get("user-agent");  let response = null;  let url = new URL(request.url);  let url_hostname = url.hostname;  if (https == true) {    url.protocol = "https:";  } else {    url.protocol = "http:";  }  if (await device_status(user_agent)) {    var upstream_domain = upstream;  } else {    var upstream_domain = upstream_mobile;  }  url.host = upstream_domain;  if (url.pathname == "/") {    url.pathname = upstream_path;  } else {    url.pathname = upstream_path + url.pathname;  }  if (blocked_region.includes(region)) {    response = new Response(      "Access denied: WorkersProxy is not available in your region yet.",      {        status: 403,      }    );  } else if (blocked_ip_address.includes(ip_address)) {    response = new Response(      "Access denied: Your IP address is blocked by WorkersProxy.",      {        status: 403,      }    );  } else {    let method = request.method;    let request_headers = request.headers;    let new_request_headers = new Headers(request_headers);    new_request_headers.set("Host", upstream_domain);    new_request_headers.set("Referer", url.protocol + "//" + url_hostname);    new_request_headers.set("Authorization", "token " + github_token);    let original_response = await fetch(url.href, {      method: method,      headers: new_request_headers,      body: request.body,    });    let connection_upgrade = new_request_headers.get("Upgrade");    if (connection_upgrade &amp;&amp; connection_upgrade.toLowerCase() == "websocket") {      return original_response;    }    let original_response_clone = original_response.clone();    let original_text = null;    let response_headers = original_response.headers;    let new_response_headers = new Headers(response_headers);    let status = original_response.status;    if (disable_cache) {      new_response_headers.set("Cache-Control", "no-store");    } else {      new_response_headers.set("Cache-Control", "max-age=43200000");    }    new_response_headers.set("access-control-allow-origin", "*");    new_response_headers.set("access-control-allow-credentials", "true");    new_response_headers.delete("content-security-policy");    new_response_headers.delete("content-security-policy-report-only");    new_response_headers.delete("clear-site-data");    if (new_response_headers.get("x-pjax-url")) {      new_response_headers.set(        "x-pjax-url",        response_headers          .get("x-pjax-url")          .replace("//" + upstream_domain, "//" + url_hostname)      );    }    const content_type = new_response_headers.get("content-type");    if (      content_type != null &amp;&amp;      content_type.includes("text/html") &amp;&amp;      content_type.includes("UTF-8")    ) {      original_text = await replace_response_text(        original_response_clone,        upstream_domain,        url_hostname      );    } else {      original_text = original_response_clone.body;    }    response = new Response(original_text, {      status,      headers: new_response_headers,    });  }  return response;}async function replace_response_text(response, upstream_domain, host_name) {  let text = await response.text();  var i, j;  for (i in replace_dict) {    j = replace_dict[i];    if (i == "$upstream") {      i = upstream_domain;    } else if (i == "$custom_domain") {      i = host_name;    }    if (j == "$upstream") {      j = upstream_domain;    } else if (j == "$custom_domain") {      j = host_name;    }    let re = new RegExp(i, "g");    text = text.replace(re, j);  }  return text;}async function device_status(user_agent_info) {  var agents = [    "Android",    "iPhone",    "SymbianOS",    "Windows Phone",    "iPad",    "iPod",  ];  var flag = true;  for (var v = 0; v &lt; agents.length; v++) {    if (user_agent_info.indexOf(agents[v]) &gt; 0) {      flag = false;      break;    }  }  return flag;}
修改完成后点击部署
绑定域名请确认已经将你自己的域名托管到cloudflare，这部分不再赘述。依次点击设置，添加，自定义域
起一个二级域名，如：imags.xxxx.com
设置完成后即可使用自己的域名进行图床图片访问。
PicGo设置最后一步，在刚刚PicGo的配置中设定自定义域名，注意末尾不要加/，不然访问会有问题
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>cloudflare</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>思源笔记，自己的数据自己掌握</title>
    <url>/99c2ad2f.html</url>
    <content><![CDATA[今年终于组件了自己的nas，做了内网穿透、搭了jellyfin服务器等等。折腾完之后便索然无味了，最近突然想搭建一个私有笔记服务，一番比较后选择了思源笔记这个项目。我是使用docker部署在自己的nas上的，如果不需要/不喜欢折腾的话，可以使用他们开箱即用的客户端。思源笔记官网：https://b3log.org/siyuan/?lang=cn
先看效果：
说说优点：
私有化部署，数据完全由自己掌控
无需客户端，只要有浏览器就可以访问
Markdown格式编辑
一键部署，省时省力

说说缺点：
docker版本的思源笔记是无法使用官方客户端进行连接的

docker命令如下docker run -d -v workspace_dir_host:workspace_dir_container -p 6806:6806 b3log/siyuan --workspace=workspace_dir_container --accessAuthCode=xxx

其中，workspace_dir_container指定思源笔记的内部工作文件夹，workspace_dir_host为你docker持久化需要的文件夹，accessAuthCode是必须填的，不然会闪退，这个就是访问你笔记的密码，如果想要外网访问肯定就需要加密码了。
这里记录一下我遇到的问题：思源笔记的docker内部使用的是siyuan这个用户，并不是常用的root用户，这就导致使用的时候会遇到一些问题，请确保你持久化的文件夹授予了siyuan用户组权限，或者最简单的，直接赋予文件夹everyone读写权限
完成部署部署完成后，打开http://localhost:6806 即可访问思源笔记，授权码即为之前设置的accessAuthCode
如果需要外网访问，可自行配置反向代理。
浏览器插件思源笔记提供了一个浏览器插件，可以实现直接将网页保存到笔记插件地址：edge，chrome
]]></content>
      <categories>
        <category>nas</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>自建zerotier-one服务器，随时随地访问内网设备</title>
    <url>/2b9f0a5e.html</url>
    <content><![CDATA[相信每一个自建博客的人都有一个自己的服务器，笔者也是。再加上前段时间组建了nas，便准备通过服务器访问家里的一些设备。一些主流的方法如frp方法虽好，但是将家里的设备都暴露在公网上。有很大的不安全性。像zerotier这种组网方式，因为服务器在海外，所以体验并不是很好。
但是可以通过自建服务器解决这个问题。最近折腾完了，遂记录下来。参考链接：

https://github.com/xubiaolin/docker-zerotier-planet
https://blog.csdn.net/zc_mk/article/details/137743742

必要条件如果你没有这些条件，就不用看下去了

一台有ipv4公网的服务器

服务器操作安装docker-zerotier-planet刚开始我是不愿意使用docker的，但是中间踩了不少坑，最后搭建的也不是正确的planet节点，最终妥协使用了大佬编译好的docker镜像和一键脚本。最开始写这篇博客的时候用的ztncui是中文界面，但是后续改成的docker页面是英文界面，不过操作相同，就不重新截图了。首先git下来脚本
git clone https://github.com/xubiaolin/docker-zerotier-planet.git
加速地址：
git clone https://ghproxy.imoyuapp.win/https://github.com/xubiaolin/docker-zerotier-planet.git
进入目录
cd docker-zerotier-planet
运行脚本
./deploy.sh
根据提示设置端口并进入到你服务器的安全组设置开放对应端口号。根据提示设置公网ip后，会有一个下载连接，根据连接把planet下载下来。
管理操作这时候打开http://你的服务器ip:3443 即可进行管理，默认账号admin，密码password。
点击添加网络：名字随便起点击简易安装，名称后面的是网络id，记录一下，后面会用到。
点击生成网络地址并提交
至此，服务器操作结束。
客户端操作windows客户端以windows为例，其他操作系统大同小异，其核心为替换官方客户端的planet为你自己编译的planet。首先下载zerotier客户端：https://www.zerotier.com/download/如果你已经加入过zerotier官方服务器的网络，请disconnect并forget。win+R调出运行框，搜索services.msc并确定右键ZeroTier One，选择属性，找到其所在文件夹并打开。替换其中的planet文件为你自己在第一步编译出的planet文件。
重启服务
任务栏找到zerotier，右键join新网络：输入之前提到的网络id右键zerotier选择网络id进行链接。这时候还不能操作，需要去后台http://你的服务器ip:3443 允许其联网。就是把这个√打上可以去CMD输入Zerotier-cli peers查看链接状态，DIRECT代表直连，RELAY代表中继，服务器网络一般的话中继会非常慢。注意：这里就是我踩坑的地方，如果搭建成功，这里应该只有一个planet!!!!
安卓客户端其他平台都是一样的操作，本质上就是更换planet文件，不再赘述。这里提供第三方zerotier安卓客户端地址，可以更换planet：https://github.com/kaaass/ZerotierFix
内网互访到此，自建zerotier服务器就结束了，但是针对一些特殊需求，比如我需要远程玩ps5，但是ps5本身不可能安装zerotier，怎么办呢。这时候就可以用zerotier的路由功能来实现。
linux系统正好我家有一台nas，就准备用它来实现了；
开启ip转发
进入终端，输入vim /etc/sysctl.conf编辑sysctl.conf文件。
增加代码：net.ipv4.ip_forward=1net.ipv6.conf.all.forwarding=1
输入sysctl -p加载内核参数

配置客户端路由
输入ifconfig，记录下物理网卡以及 ZeroTier 的虚拟网卡，这个根据你在后台看到的虚拟ip和你物理机的真实ip就可以找到。
将网卡名字导出为环境变量PHYSICAL_IFACE=&lt;物理网卡&gt;ZEROTIER_IFACE=&lt;ZeroTier 虚拟网卡&gt;
更新路由表iptables -t nat -A POSTROUTING -o $PHYSICAL_IFACE -j MASQUERADEiptables -A FORWARD -i $PHYSICAL_IFACE -o $ZEROTIER_IFACE -m state --state RELATED,ESTABLISHED -j ACCEPTiptables -A FORWARD -i $ZEROTIER_IFACE -o $PHYSICAL_IFACE -j ACCEPTiptables-save
持久化路由表mkdir -p /etc/sysconfig/sh -c "iptables-save &gt; /etc/sysconfig/iptables"
在/etc/rc.local文件的末尾添加一行/sbin/iptables-restore &lt; /etc/sysconfig/iptables

配置 ZeroTier 路由规则到我们的服务器后台，选择网络的路由选项。
在添加新路由这里进行配置其中目标是你内网的ip，比如你的家庭内网的路由器是192.168.1.1，那么你就填192.168.1.0/24，网关是你希望转发的那台设备加入zerotier网络时分配的ip。
这时候，你应该就可以像连接内网一样用家里路由器的ip进行设备访问了。
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
</search>
